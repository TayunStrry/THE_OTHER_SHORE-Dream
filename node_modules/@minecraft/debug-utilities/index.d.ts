// Type definitions for Minecraft Bedrock Edition script APIs
// Project: https://docs.microsoft.com/minecraft/creator/
// Definitions by: Jake Shirley <https://github.com/JakeShirley>
//                 Mike Ammerlaan <https://github.com/mammerla>

/* *****************************************************************************
   Copyright (c) Microsoft Corporation.
   ***************************************************************************** */
/**
 * @beta
 * @packageDocumentation
 * Contains debug utility functions.
 *
 * Manifest Details
 * ```json
 * {
 *   "module_name": "@minecraft/debug-utilities",
 *   "version": "1.0.0-beta"
 * }
 * ```
 *
 */
import * as minecraftcommon from '@minecraft/common';
import * as minecraftserver from '@minecraft/server';
/**
 * 箭头头部/尖端的长度。
 */
// @ts-ignore 允许对原生定义的类进行继承
export class DebugArrow extends DebugLine {
    /**
     * @remarks
     * 向世界中添加一个新的调试形状。
     */
    headLength: number;
    /**
     * @remarks
     * 箭头头部/尖端的半径。
     */
    headRadius: number;
    /**
     * @remarks
     * 箭头头部/尖端基础圆的分段数量（默认值：4）。
     */
    headSegments: number;
    constructor(location: minecraftserver.Vector3, endLocation: minecraftserver.Vector3);
}
/**
 * 一个表示立方体或长方体的调试形状类
 */
// @ts-ignore 允许对原生定义的类进行继承
export class DebugBox extends DebugShape {
    /**
     * @remarks
     * 该形状的边界框。最终的立方体尺寸将根据该边界乘以形状的缩放比例得到
     */
    bound: minecraftserver.Vector3;
    constructor(location: minecraftserver.Vector3);
}

/**
 * 表示二维圆形的调试形状类
 */
// @ts-ignore 允许对原生定义的类进行继承
export class DebugCircle extends DebugShape {
    constructor(location: minecraftserver.Vector3);
}

/**
 * 用于在世界空间中添加和移除线框形状的调试绘制类
 */
export class DebugDrawer {
    private constructor();
    /**
     * @remarks
     * 将新的调试形状添加到世界中
     *
     * @param shape
     * 要添加的调试形状。应为 DebugBox、DebugLine、DebugCircle、DebugSphere、DebugArrow 或 DebugText 类型
     */
    addShape(shape: DebugShape): void;
    /**
     * @remarks
     * 从世界中移除所有调试形状
     */
    removeAll(): void;
    /**
     * @remarks
     * 从世界中移除指定的调试形状实例。等同于直接调用该形状的 remove 方法
     */
    removeShape(shape: DebugShape): void;
}

/**
 * 表示线段的调试形状类
 */
// @ts-ignore 允许对原生定义的类进行继承
export class DebugLine extends DebugShape {
    /**
     * @remarks
     * 线段的结束位置。最终的线段将生成于 location 和 endLocation 之间
     */
    endLocation: minecraftserver.Vector3;
    constructor(location: minecraftserver.Vector3, endLocation: minecraftserver.Vector3);
}

/**
 * 所有调试形状的基础类。表示世界中的对象及其基本属性。
 */
export class DebugShape {
    private constructor();
    /**
     * @remarks
     * 形状的颜色。
     */
    color: minecraftserver.RGB;
    /**
     * @remarks
     * 如果形状在被移除前具有有限生命周期，则返回 true。
     */
    readonly hasDuration: boolean;
    /**
     * @remarks
     * 形状的位置。对于大多数形状来说这是形状的中心点，
     * 但 DebugLine 和 DebugArrow 类型的形状表示线段的起点。
     */
    location: minecraftserver.Vector3;
    /**
     * @remarks
     * 形状的旋转角度（欧拉角 - [俯仰角, 偏航角, 滚转角]）。
     */
    rotation: minecraftserver.Vector3;
    /**
     * @remarks
     * 形状的缩放比例。此属性不适用于 DebugLine 和 DebugArrow 类型。
     */
    scale: number;
    /**
     * @remarks
     * 形状被自动移除前剩余时间（以秒为单位）。若形状没有有限生命周期则返回 0。
     */
    timeLeft?: number;
    /**
     * @remarks
     * 形状被自动移除前的初始总时间（以秒为单位）。若形状没有有限生命周期则返回 0。
     */
    readonly totalTimeLeft?: number;
    /**
     * @remarks
     * 从世界中移除此形状。可通过 DebugDrawer 的 addShape 方法重新添加该形状。
     */
    remove(): void;
}

/**
 * 表示球体的调试形状类
 */
// @ts-ignore 允许对原生定义的类进行继承
export class DebugSphere extends DebugShape {
    constructor(location: minecraftserver.Vector3);
}

/**
 * A debug shape class that a text label. The text label
 * automatically faces the screen.
 */
// @ts-ignore Class inheritance allowed for native defined classes
export class DebugText extends DebugShape {
    /**
     * @remarks
     * The text of the shape to display.
     *
     */
    text: string;
    constructor(location: minecraftserver.Vector3, text: string);
}

export interface HandleCounts {
    handleCounts: Record<string, number>;
    name: string;
    packId: string;
    scriptModuleUUID: string;
}

export interface PluginStats {
    plugins: HandleCounts[];
}

export interface RuntimeStats {
    arrayCount: number;
    atomCount: number;
    atomSize: number;
    fastArrayCount: number;
    fastArrayElementCount: number;
    functionCodeSize: number;
    functionCount: number;
    functionLineCount: number;
    functionSize: number;
    memoryAllocatedCount: number;
    memoryAllocatedSize: number;
    memoryUsedCount: number;
    memoryUsedSize: number;
    objectCount: number;
    objectSize: number;
    propertyCount: number;
    propertySize: number;
    stringCount: number;
    stringSize: number;
}

/**
 * @remarks
 * Collect type usage stats for each active script
 * plugin/add-on.
 *
 * @returns
 * PluginStats object.
 */
export function collectPluginStats(): PluginStats;
/**
 * @remarks
 * Collect memory stats for script runtimes.
 *
 * @returns
 * RuntimeStats object.
 */
export function collectRuntimeStats(): RuntimeStats;
/**
 * @remarks
 * Disable watchdog slow and spike warnings per plugin.
 *
 * @param disable
 * Flag to disable or re-enable warnings.
 * @throws This function can throw errors.
 */
export function disableWatchdogTimingWarnings(disable: boolean): void;
/**
 * @remarks
 * Debug Drawing class used to allow adding and removing
 * wireframe shapes in world space.
 *
 */
export const debugDrawer: DebugDrawer;
